using System;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using DevExpress.XtraEditors.Controls;
using static Elogon256.sqlConns;
using EtravSQL;
using DevExpress.DataAccess.Excel;
using System.Data.SqlClient;
using System.Data;
using System.Reflection;
using System.IO;
using System.Text;
using System.Security;
using System.Security.Cryptography;


namespace EmployeeManager
{
    public partial class Form1 : Form
    {
        static string CallingAppName = "EmployeeManager.exe"; //the name of this app used for login dll
        public string MainTable = "qcrr.dbo.Employee_Information";//Table being written to. (Change to qcrr.dbo.Employee_Information to go live)qcrr.dbo.Employee_Information_Test
        public string BUTable = "qcrr.dbo.Employee_Information_BACKUP";//backup table(its cleared before each backup)
        public string BUTableCN = "qcrr.dbo.Employee_Information_china";//backup table(its cleared before each backup)
        const String ConnStr = "Data Source=etrav-hack;Initial Catalog=qcrr;Persist Security Info=True;User ID=Application;Password=noitacilppa";//US
        const String ConnStr1 = "Data Source=etrav-hack;Initial Catalog=qcrr;Persist Security Info=True;User ID=Application;Password=noitacilppa";//CHINA "was using as a test
        private string ETRAV = null;
        private string serverver;
        public string LoggedinEmployeeID { get; private set; }
        private bool loggedIN;
        private string employeeID;
        private string employeeName;
        private int rights;
        private int authorizedlevel;
        public string xfile;
        private string NemployeeName;
        private string NemployeeID;
        private string NemployeeLOC;
        private string NemployeeTitle;
        private string NemployeeDeptID;
        private string NemployeeHireDate;
        private string NemployeeSupervisorName;
        private string NemployeeFName;
        private string NemployeeMName;
        private string NemployeeLName;
        private string NPostionStatus;
        private string LOCAREA;
        private string EMPLOYEETYPE;
        public string password;
        public string name;
        static string enternalpassword = "duty";
        private bool prestate;
        public bool apostcheck;
        string passwordchk;
        bool success = false;
       
        SecureString secureString = new SecureString();
        
        public bool state { get; private set; }
        public bool upload { get; private set; }

        public Form1()
        {

            InitializeComponent();

            //initialize Employee Status
            object[] itemValues = new object[] { 0, 1, 2 };
            string[] itemDescriptions = new string[] { "Full Time", "Part Time", "Reg_Temp" };
            for (int i = 0; i < itemValues.Length; i++)
            {
                radioGroup1.Properties.Items.Add(new RadioGroupItem(itemValues[i], itemDescriptions[i]));
            }
            //initialize Location Status 2
            object[] itemValues2 = new object[] { 0, 1 };
            string[] itemDescriptions2 = new string[] { "US", "CHINA" };
            for (int j = 0; j < itemValues2.Length; j++)
            {
                radioGroup2.Properties.Items.Add(new RadioGroupItem(itemValues2[j], itemDescriptions2[j]));
            }

            SqlConnection SqlConn = new SqlConnection(ConnStr);
            SqlConn.Open();
            SqlCommand SelectCommand = new SqlCommand("select distinct SupervisorName from dbo.Employee_Information", SqlConn);
            SqlDataReader myreader = SelectCommand.ExecuteReader();

            while (myreader.Read())
            {
                txtBoss.Properties.Items.Add(myreader["SupervisorName"].ToString());

            }
            myreader.Close();

            ConfirmUser();

            //Get Logon and new logon for new user if accsess is granted already. See rights application
            if (state == false) { Environment.Exit(1); }

            EMPLOYEETYPE = "R";
            radioGroup1.EditValue = 0;//defualt Employee Type = R
            lblstat.Text = "READY!";

            //set version info
            Version version = Assembly.GetExecutingAssembly().GetName().Version;
            lblVersion.Text = (String.Format(lblVersion.Text, version.Major, version.Minor, version.Build, version.Revision));
            lblVersion.Text = "Version:" + version;
            CheckGetUpdates(version);
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a ExcelDataSource
            //excelDataSource1.Fill();//for testing source in installation folder
            //excelDataSource2.Fill();//for testing source in installation folder

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a ExcelDataSource
            //excelDataSource3.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a ExcelDataSource
            //excelDataSource2.Fill();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a ExcelDataSource
            //excelDataSource3.Fill();
        }

        private void simpleButton1_Click(object sender, EventArgs e)//ADD/UPDATE ONE NEW EMPLOYEE
        {
            //Check Data
            NemployeeName = string.Format("{0},{1}", NemployeeLName, NemployeeFName);
            if (NemployeeMName != "" && NemployeeMName != null) { NemployeeName = string.Format("{0} {1},{2}", NemployeeLName, NemployeeMName, NemployeeFName); }
            NemployeeName = RemoveWhitespace(NemployeeName);
            SqlConnection SqlConn = new SqlConnection(ETRAV);
            SqlConn.Open();
            SqlDataAdapter sda = new SqlDataAdapter(string.Format("SELECT COUNT(*) FROM {1} where EmployeeID='{0}'", NemployeeID, MainTable), SqlConn);
            DataTable dt = new DataTable();
            sda.Fill(dt);
            
            //ifOK Upload new employee
            if (dt.Rows[0][0].ToString() == "0")
            {

                NemployeeHireDate=(Convert.ToDateTime(NemployeeHireDate)).ToShortDateString();
                //string newemployee = string.Format("insert into {9} (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName,FullPart,Reg_Temp) Values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')", NemployeeID, NemployeeLOC, NemployeeName, NemployeeTitle, NemployeeDeptID, NemployeeHireDate, NemployeeSupervisorName, EMPLOYEETYPE, EMPLOYEETYPE, MainTable);
                try
                {
                    //mySQL mSQL = new mySQL();
                    //bool success = mSQL.myInsert("Etrav-Hack", newemployee);
                    //if (success == true) { lblstat.Text = "Updated Employee: " + NemployeeName; RefreshForm(); } else { lblstat.Text = string.Format("Employee: {0} Not Updated. Check Entries", NemployeeName); }

                    string connectionString = ConnStr;
                    using (SqlConnection connection = new SqlConnection(connectionString))
                    {
                        SqlCommand command = connection.CreateCommand();
                        command.CommandText = string.Format("insert into {0}  (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName,FullPart,Reg_Temp,EmpGroup,Shift,Work_Center,CostCenter) Values( @NemployeeID, @NemployeeLOC, @NemployeeName, @NemployeeTitle, @NemployeeDeptID, @NemployeeHireDate, @NemployeeSupervisorName, @EMPLOYEETYPE, @EMPLOYEETYPE1, '','','','')", MainTable);
                        command.Parameters.AddWithValue("@NemployeeID", NemployeeID);
                        command.Parameters.AddWithValue("@NemployeeLOC", NemployeeLOC);
                        command.Parameters.AddWithValue("@NemployeeName", NemployeeName);
                        command.Parameters.AddWithValue("@NemployeeTitle", NemployeeTitle);
                        command.Parameters.AddWithValue("@NemployeeDeptID", NemployeeDeptID);
                        command.Parameters.AddWithValue("@NemployeeHireDate", NemployeeHireDate);
                        command.Parameters.AddWithValue("@NemployeeSupervisorName", NemployeeSupervisorName);
                        command.Parameters.AddWithValue("@MainTable", MainTable);
                        command.Parameters.AddWithValue("@EMPLOYEETYPE", EMPLOYEETYPE);
                        command.Parameters.AddWithValue("@EMPLOYEETYPE1", EMPLOYEETYPE);

                        connection.Open();

                        command.ExecuteNonQuery();
                        connection.Close();
                        lblstat.Text = string.Format("Upload of {0} Succsesful!", NemployeeName);
                        lblstat.Update();
                    }
                }

                catch
                {
                    MessageBox.Show("SQL Insert Failed For Query: \n" + NemployeeName);
                    //hyperlinkLabelControl1.Text = "SQL Insert Failed";
                    return;
                }
            }
            if (dt.Rows[0][0].ToString() == "1")
            {

                //string newemployee = string.Format("update {9} set EmployeeID='{0}',Location='{1}',Name='{2}',Title='{3}',DeptID='{4}',HireDate='{5}',SupervisorName='{6}',FullPart='{7}',Reg_Temp='{8}' where EmployeeID='{0}'", NemployeeID, NemployeeLOC, NemployeeName, NemployeeTitle, NemployeeDeptID, NemployeeHireDate, NemployeeSupervisorName, EMPLOYEETYPE, EMPLOYEETYPE, MainTable);
                try
                {
                    //mySQL mSQL = new mySQL();
                    //bool success = mSQL.myInsert("Etrav-Hack", newemployee);
                    //if (success == true) { lblstat.Text = "Updated Employee: " + NemployeeName; RefreshForm(); } else { lblstat.Text = string.Format("Employee: {0} Not Updated. Check Entries", NemployeeName); }

                    string connectionString = ConnStr;
                    using (SqlConnection connection = new SqlConnection(connectionString))
                    {
                        SqlCommand command = connection.CreateCommand();
                        command.CommandText = string.Format("update {0} set EmployeeID=@NemployeeID,Location=@NemployeeLOC,Name=@NemployeeName,Title=@NemployeeTitle,DeptID=@NemployeeDeptID,HireDate=@NemployeeHireDate,SupervisorName=@NemployeeSupervisorName ,EmpGroup='',Shift='',Work_Center='',CostCenter='' where EmployeeID=@NemployeeID", MainTable);
                        command.Parameters.AddWithValue("@NemployeeID", NemployeeID);
                        command.Parameters.AddWithValue("@NemployeeLOC", NemployeeLOC);
                        command.Parameters.AddWithValue("@NemployeeName", NemployeeName);
                        command.Parameters.AddWithValue("@NemployeeTitle", NemployeeTitle);
                        command.Parameters.AddWithValue("@NemployeeDeptID", NemployeeDeptID);
                        command.Parameters.AddWithValue("@NemployeeHireDate", NemployeeHireDate);
                        command.Parameters.AddWithValue("@NemployeeSupervisorName", NemployeeSupervisorName);
                        command.Parameters.AddWithValue("@MainTable", MainTable);

                        connection.Open();

                        command.ExecuteNonQuery();
                        connection.Close();
                        lblstat.Text = string.Format("Upload of {0} Succsesful!", NemployeeName);
                        lblstat.Update();
                    }


                }

                catch
                {
                    MessageBox.Show("SQL Insert Failed For Query: \n" + NemployeeName);
                    //hyperlinkLabelControl1.Text = "SQL Insert Failed";
                    return;
                }
            }
            SqlConn.Close();
        }

        private void simpleButton2_Click(object sender, EventArgs e)//DELETE ONE CURRENT EMPLOYEE
        {
            string value = "YES";
            //InputBox.Show("New document", "New document name:", ref value);
            if (InputBox("Confirm?", "ARE YOU SURE YOU WANT TO DELETE USER?:", ref value) == DialogResult.OK)
            {



                //Check Data
                NemployeeName = string.Format("{0},{1}", NemployeeLName, NemployeeFName);
                if (NemployeeMName != "") { NemployeeName = string.Format("{0} {1},{2}", NemployeeLName, NemployeeMName, NemployeeFName); }
                NemployeeName = RemoveWhitespace(NemployeeName);
                SqlConnection SqlConn = new SqlConnection(ETRAV);
                SqlConn.Open();
                SqlDataAdapter sda = new SqlDataAdapter(string.Format("SELECT COUNT(*) FROM {2} where Name='{0}' and EmployeeID='{1}'", NemployeeName, NemployeeID, MainTable), SqlConn);
                DataTable dt = new DataTable();
                sda.Fill(dt);

                //ifOK Delete employee
                if (dt.Rows[0][0].ToString() == "1")
                {

                    string deleteemployee = string.Format("delete from  {2} where EmployeeID='{0}'and Name='{1}'", NemployeeID, NemployeeName, MainTable);
                    try
                    {
                        mySQL mSQL = new mySQL();
                        bool success = mSQL.myInsert("Etrav-Hack", deleteemployee);
                        if (success == true) { lblstat.Text = "Deleted Employee: " + NemployeeName; RefreshForm(); }

                    }

                    catch
                    {
                        MessageBox.Show("SQL Insert Failed For Query: \n" + deleteemployee);
                        lblstat.Text = "ERROR! ";
                        return;
                    }
                }
            }
            else { return; }

        }

        private void simpleButton3_Click(object sender, EventArgs e)//UPLOAD (INSERT) EMPLOYEE FILE(XLS,CVS)
        {
            SqlBulkCopy bc = new SqlBulkCopy(ETRAV) { DestinationTableName = BUTable };
            upload = true;


            //OPEN DIALOG BOX
            DialogResult result = openFileDialog1.ShowDialog();

            //Check Data
            if (result == DialogResult.OK) // Test result.
            {

                xfile = openFileDialog1.FileName;
            }
            else { return; }


            if (xfile.Contains(".txt"))//upload a stupid text file
            {
                LOCAREA = "16";
                //issue a backup
                employBU();
                string lineOfText;
                var filestream = new FileStream(openFileDialog1.FileName, FileMode.Open,
                                          FileAccess.Read,
                                          FileShare.ReadWrite);
                var file = new StreamReader(filestream, System.Text.Encoding.UTF8, true, 128);
                while ((lineOfText = file.ReadLine()) != null)
                {
                    try
                    {
                        var line = lineOfText;
                        if (line == "EMPLOYEEID~LASTNAME,FIRSTNAME~TITLE~SUPERVISOR~DEPTID ~Date Joined") { continue; }
                        var a = line.IndexOf("~").ToString();
                        var b = line.LastIndexOf("~").ToString();
                        var c = line.Length;
                        NemployeeID = line.Substring(0, int.Parse(a));

                        //Employee Name
                        int d = NemployeeID.Length;
                        line = line.Remove(0, NemployeeID.Length + 1);
                        a = line.IndexOf("~").ToString();
                        NemployeeName = line.Substring(0, int.Parse(a));

                        //Employee Title
                        d = NemployeeName.Length;
                        line = line.Remove(0, d + 1);
                        a = line.IndexOf("~").ToString();
                        NemployeeTitle = line.Substring(0, int.Parse(a));


                        //Employee Manager
                        d = NemployeeTitle.Length;
                        if (d > 50)
                        {
                            NemployeeTitle = NemployeeTitle.Remove(50, (d - 50));
                            lblstat.Text = string.Format("Title had to be reduced to {0} \r\n to meet 50 character max requirment!", NemployeeTitle);
                            lblstat.Update();
                        }//out of range edit
                        line = line.Remove(0, d + 1);
                        a = line.IndexOf("~").ToString();
                        NemployeeSupervisorName = line.Substring(0, int.Parse(a));
                        var z = NemployeeSupervisorName.IndexOf(" ").ToString();
                        string NemployeeSupFName = NemployeeSupervisorName.Substring(0, int.Parse(z));
                        string NemployeeSupLName = NemployeeSupervisorName.Remove(0, Convert.ToInt32(z) + 1);
                        NemployeeSupervisorName = string.Format("{0},{1}", NemployeeSupLName, NemployeeSupFName);


                        //Employee department
                        d = NemployeeSupervisorName.Length;
                        line = line.Remove(0, d + 1);
                        a = line.IndexOf("~").ToString();
                        NemployeeDeptID = line.Substring(0, int.Parse(a));

                        //Employee Hire Date
                        d = NemployeeDeptID.Length;
                        line = line.Remove(0, d + 1);
                        a = line.IndexOf("~").ToString();
                        NemployeeHireDate = (Convert.ToDateTime(line)).ToShortDateString();
                    }
                    catch (ArgumentNullException)
                    {
                        MessageBox.Show(string.Format("Theres an error in the format of your file. Correct format at: {0}{1}{2}\r\n{3}{4}{5}", NemployeeID, NemployeeName, NemployeeTitle, NemployeeSupervisorName, NemployeeDeptID, NemployeeHireDate));
                        return;
                    }
                    catch (ArgumentOutOfRangeException)
                    {
                        MessageBox.Show(string.Format("Theres an error in the format of your file. Correct format at: {0}{1}{2}\r\n{3}{4}{5}", NemployeeID, NemployeeName, NemployeeTitle, NemployeeSupervisorName, NemployeeDeptID, NemployeeHireDate));
                        return;
                    }

                    //update/insert row table
                    mySQL mSQL = new mySQL();
                    SqlConnection SqlConn = new SqlConnection(ConnStr);
                    SqlConn.Open();
                    SqlDataAdapter sda = new SqlDataAdapter(string.Format("SELECT COUNT(*) FROM {1} where EmployeeID='{0}'", NemployeeID, MainTable), SqlConn);
                    DataTable dt = new DataTable();
                    sda.Fill(dt);
                    if (Convert.ToInt32(dt.Rows[0][0]) > 0)//update
                    {
                       // var S1 = string.Format("update {7} set EmployeeID='{0}',Location='{1}',Name='{2}',Title='{3}',DeptID='{4}',HireDate='{5}',SupervisorName='{6}'where EmployeeID='{0}' ", NemployeeID, NemployeeLOC, NemployeeName, NemployeeTitle, NemployeeDeptID, NemployeeHireDate, NemployeeSupervisorName, MainTable);
                        //bool success = mSQL.myInsert("Etrav-Hack", S1);
                        //if (success == false)
                        //{
                            //upload = false;
                            //lblstat.Text = string.Format("Upload FAILED for: {0}{1}{2}{3} \r\n {4}{5}{6}", NemployeeID, NemployeeLOC, NemployeeName, NemployeeTitle, NemployeeDeptID, NemployeeHireDate, NemployeeSupervisorName);
                            //lblstat.Update();
                        //}

                        string connectionString = ConnStr;
                        using (SqlConnection connection = new SqlConnection(connectionString))
                        {
                            SqlCommand command = connection.CreateCommand();
                            command.CommandText = string.Format("update {0} set EmployeeID=@NemployeeID,Location=@NemployeeLOC,Name=@NemployeeName,Title=@NemployeeTitle,DeptID=@NemployeeDeptID,HireDate=@NemployeeHireDate,SupervisorName=@NemployeeSupervisorName ,EmpGroup='',Shift='',Work_Center='',CostCenter='' where EmployeeID=@NemployeeID", MainTable);
                            command.Parameters.AddWithValue("@NemployeeID", NemployeeID);
                            command.Parameters.AddWithValue("@NemployeeLOC", NemployeeLOC);
                            command.Parameters.AddWithValue("@NemployeeName", NemployeeName);
                            command.Parameters.AddWithValue("@NemployeeTitle", NemployeeTitle);
                            command.Parameters.AddWithValue("@NemployeeDeptID", NemployeeDeptID);
                            command.Parameters.AddWithValue("@NemployeeHireDate", NemployeeHireDate);
                            command.Parameters.AddWithValue("@NemployeeSupervisorName", NemployeeSupervisorName);
                            //command.Parameters.AddWithValue("@MainTable", MainTable);

                            connection.Open();

                            command.ExecuteNonQuery();
                            connection.Close();
                        }



                    }
                    else
                    {
                        //var S1 = string.Format("insert into {9}  (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName,FullPart,Reg_Temp) Values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')", NemployeeID, NemployeeLOC, NemployeeName, NemployeeTitle, NemployeeDeptID, NemployeeHireDate, NemployeeSupervisorName, EMPLOYEETYPE, EMPLOYEETYPE, MainTable);
                        //bool success = mSQL.myInsert("Etrav-Hack", S1);
                        //if (success == false)
                        //{
                           // upload = false;
                            //lblstat.Text = string.Format("Upload FAILED for: {0}{1}{2}{3} \r\n {4}{5}{6}", NemployeeID, NemployeeLOC, NemployeeName, NemployeeTitle, NemployeeDeptID, NemployeeHireDate, NemployeeSupervisorName);
                           // lblstat.Update();
                       // }
                       // SqlConn.Close();


                        string connectionString = ConnStr;
                        using (SqlConnection connection = new SqlConnection(connectionString))
                        {
                            SqlCommand command = connection.CreateCommand();
                            command.CommandText = string.Format("insert into {0}  (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName,FullPart,Reg_Temp,EmpGroup,Shift,Work_Center,CostCenter) Values( @NemployeeID, @NemployeeLOC, @NemployeeName, @NemployeeTitle, @NemployeeDeptID, @NemployeeHireDate, @NemployeeSupervisorName, @EMPLOYEETYPE, @EMPLOYEETYPE1, '','','','')", MainTable);
                            command.Parameters.AddWithValue("@NemployeeID", NemployeeID);
                            command.Parameters.AddWithValue("@NemployeeLOC", NemployeeLOC);
                            command.Parameters.AddWithValue("@NemployeeName", NemployeeName);
                            command.Parameters.AddWithValue("@NemployeeTitle", NemployeeTitle);
                            command.Parameters.AddWithValue("@NemployeeDeptID", NemployeeDeptID);
                            command.Parameters.AddWithValue("@NemployeeHireDate", NemployeeHireDate);
                            command.Parameters.AddWithValue("@NemployeeSupervisorName", NemployeeSupervisorName);
                            command.Parameters.AddWithValue("@MainTable", MainTable);
                            command.Parameters.AddWithValue("@EMPLOYEETYPE", EMPLOYEETYPE);
                            command.Parameters.AddWithValue("@EMPLOYEETYPE1", EMPLOYEETYPE);

                            connection.Open();

                            command.ExecuteNonQuery();
                            connection.Close();
                        }


                    }
                    upload = false;
                    lblstat.Text = string.Format("Upload of {0} Succsesful!", NemployeeName);
                    lblstat.Update();
                    //return;
                }
            }
            //ifOK Upload UPDATED EMPLOYEE LIST
            else // Test result.
            {

                xfile = openFileDialog1.FileName;
                excelDataSource1.FileName = xfile;
                excelDataSource2.FileName = xfile;
                lblstat.Text = "Loaded File: " + xfile;

                //issue a current backup
                employBU();

                //determine file type
                if (xfile.ToLower().Contains("xlsx")) { handeldataexcel(); upload = false; return; }
                if (xfile.ToLower().Contains("xls")) { handeldataexcel(); upload = false; return; }
                if (xfile.ToLower().Contains("xlsm")) { handeldataexcel(); upload = false; return; }
                if (xfile.ToLower().Contains("csv")) { handeldatacsv(); upload = false; return; }

            }
            Console.WriteLine(result); // <-- For debugging use.
            if(upload==false)
            {
                lblstat.Text = string.Format("Upload of {0} Succsesful!", xfile);
                lblstat.Update();
            }
            LOCAREA = "36"; //default
        }

        public void handeldataexcel()//us&china excel file types
        {
            ExcelDataSource excelDataSource1 = new ExcelDataSource() { FileName = xfile };
            ExcelSourceOptions myOptions = new ExcelSourceOptions();
            ExcelWorksheetSettings cellRangeSettings = new ExcelWorksheetSettings("Data");//Sheet1
            myOptions.ImportSettings = cellRangeSettings;
            excelDataSource1.SourceOptions = myOptions;
            gridControl1.DataSource = excelDataSource1;
            gridControl1.RefreshDataSource();
            try
            { excelDataSource1.Fill(); }
            catch(ArgumentException)
            {
                MessageBox.Show("File is in wrong format! Use Excel file type please. Columns:EmployeeID	Location	Name	Title	DeptID	EmpGroup	SupervisorName	FullPart	Shift	Reg_Temp	Work_Center	CostCenter	HireDate"); return;


            }//else error message

            

            for (int i = 0; i < gridView1.RowCount; i++)
            {
                int Info; int c = 0;
                NemployeeName = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Payroll Name"]);
                c = NemployeeName.Length;
                var a = NemployeeName.IndexOf(" ").ToString();
                var f = NemployeeName.IndexOf(",");
                var b = NemployeeName.LastIndexOf(" ").ToString();
                var g = NemployeeName.LastIndexOf(".").ToString();
                var d = NemployeeName.Remove(0, Convert.ToInt32(b));
                d = RemoveWhitespace(d);
                var e = d.Length;
                if (a != "0" && a!=b && e==1) { NemployeeName = NemployeeName.Remove(c-1, 1); }
                if (a != "0" && a != b && e==2 && g!="-1") { NemployeeName = NemployeeName.Remove(c - 2, 2); }
                if (e == 1) { NemployeeName = RemoveWhitespace(NemployeeName); }
                else { NemployeeName = NemployeeName.Remove(f + 1, 1); }
                var h = NemployeeName.LastIndexOf(" ");
                if (e == 2 && g!="-1")
                {
                    NemployeeName = NemployeeName.Remove(h, 1);
                    NemployeeName = RemoveWhitespace(NemployeeName);
                }
                NemployeeID = gridView1.GetRowCellDisplayText(i, gridView1.Columns["File Number"]);
                NemployeeID = NemployeeID.Remove(0, 1);
                NemployeeLOC = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Department Number"]);
                NemployeeLOC = NemployeeLOC.Remove(0, 1);
                NemployeeDeptID = NemployeeLOC.Remove(0, 2);
                NemployeeLOC = NemployeeLOC.Remove(2, 3);
                NemployeeTitle = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Job Title Description"]);
                NemployeeHireDate = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Hire Date"]);
                string NemployeeSupLName = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Reports To Last Name"]);
                string NemployeeSupFName = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Reports To First Name"]);
                NemployeeSupervisorName = string.Format("{0},{1}", NemployeeSupLName, NemployeeSupFName);
                NPostionStatus = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Position Status"]);
                if (NemployeeName == "") { return; }//something went wrong
                string S1 = string.Format("SELECT COUNT(*) FROM {1} where EmployeeID='{0}'", NemployeeID, MainTable);
                string S2 = string.Format("insert into  {0} (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName) Values('", MainTable);
                SqlConnection SqlConn = new SqlConnection(ETRAV);
                SqlConn.Open();
                SqlCommand sda = new SqlCommand(S1, SqlConn);
                Info = (int)sda.ExecuteScalar();
                SqlConn.Close();
                if (Info >= 1)
                {

                    //string S3 = string.Format("update {7} set EmployeeID='{0}',Location='{1}',Name='{2}',Title='{3}',DeptID='{4}',HireDate='{5}',SupervisorName='{6}'where EmployeeID='{0}' ", NemployeeID, NemployeeLOC, NemployeeName, NemployeeTitle, NemployeeDeptID, NemployeeHireDate, NemployeeSupervisorName, MainTable);

                    try

                    {
                        //mySQL mSQL = new mySQL();
                        //if (radioGroup2.SelectedIndex == 0)
                        //{
                            //bool success = mSQL.myInsert("Etrav-Hack", S3);
                            string connectionString = ConnStr;
                            using (SqlConnection connection = new SqlConnection(connectionString))
                            {
                                SqlCommand command = connection.CreateCommand();
                                command.CommandText = string.Format("update {0} set EmployeeID=@NemployeeID,Location=@NemployeeLOC,Name=@NemployeeName,Title=@NemployeeTitle,DeptID=@NemployeeDeptID,HireDate=@NemployeeHireDate,SupervisorName=@NemployeeSupervisorName ,EmpGroup='',Shift='',Work_Center='',CostCenter='' where EmployeeID=@NemployeeID", MainTable);
                                command.Parameters.AddWithValue("@NemployeeID", NemployeeID);
                                command.Parameters.AddWithValue("@NemployeeLOC", NemployeeLOC);
                                command.Parameters.AddWithValue("@NemployeeName", NemployeeName);
                                command.Parameters.AddWithValue("@NemployeeTitle", NemployeeTitle);
                                command.Parameters.AddWithValue("@NemployeeDeptID", NemployeeDeptID);
                                command.Parameters.AddWithValue("@NemployeeHireDate", NemployeeHireDate);
                                command.Parameters.AddWithValue("@NemployeeSupervisorName", NemployeeSupervisorName);
                                //command.Parameters.AddWithValue("@MainTable", MainTable);

                                connection.Open();

                                command.ExecuteNonQuery();
                                connection.Close();
                            }


                            lblstat.Text = "Updated Employee: " + NemployeeName;
                            lblstat.Update();
                        //}
                        //if (radioGroup2.SelectedIndex == 1)
                        //{
                            //bool success = mSQL.myInsert("Etrav-Hack", S2);//china
                            //lblstat.Text = "Updated Employee: " + NemployeeName;
                            //lblstat.Update();
                        //}
                    }

                    catch
                    {
                        MessageBox.Show("SQL Insert Failed For Query: \n" + S2);

                        return;
                    }
                }
                else
                {
                    //if (NemployeeName.Contains("'")) { NemployeeName = NemployeeName.Replace("'", " "); }
                    S2 = string.Format("{0}{1}','", S2, NemployeeID);
                    S2 = string.Format("{0}{1}','", S2, NemployeeLOC);
                    S2 = string.Format("{0}{1}','", S2, NemployeeName);
                    S2 = string.Format("{0}{1}','", S2, NemployeeTitle);
                    S2 = string.Format("{0}{1}','", S2, NemployeeDeptID);
                    S2 = string.Format("{0}{1}','", S2, NemployeeHireDate);
                    S2 = string.Format("{0}{1}')", S2, NemployeeSupervisorName);
                    try
                    {
                        //mySQL mSQL = new mySQL();
                        //if (radioGroup2.SelectedIndex == 0)
                        //{
                           // bool success = mSQL.myInsert("Etrav-Hack", S2);
                            //if (success == true)
                            //{
                                
                            //}

                            string connectionString = ConnStr;
                            using (SqlConnection connection = new SqlConnection(connectionString))
                            {
                                SqlCommand command = connection.CreateCommand();
                                command.CommandText = string.Format("insert into {0}  (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName,FullPart,Reg_Temp,EmpGroup,Shift,Work_Center,CostCenter) Values( @NemployeeID, @NemployeeLOC, @NemployeeName, @NemployeeTitle, @NemployeeDeptID, @NemployeeHireDate, @NemployeeSupervisorName, @EMPLOYEETYPE, @EMPLOYEETYPE1, '','','','')", MainTable);
                                command.Parameters.AddWithValue("@NemployeeID", NemployeeID);
                                command.Parameters.AddWithValue("@NemployeeLOC", NemployeeLOC);
                                command.Parameters.AddWithValue("@NemployeeName", NemployeeName);
                                command.Parameters.AddWithValue("@NemployeeTitle", NemployeeTitle);
                                command.Parameters.AddWithValue("@NemployeeDeptID", NemployeeDeptID);
                                command.Parameters.AddWithValue("@NemployeeHireDate", NemployeeHireDate);
                                command.Parameters.AddWithValue("@NemployeeSupervisorName", NemployeeSupervisorName);
                                //command.Parameters.AddWithValue("@MainTable", MainTable);
                                command.Parameters.AddWithValue("@EMPLOYEETYPE", "");
                                command.Parameters.AddWithValue("@EMPLOYEETYPE1", EMPLOYEETYPE);

                                connection.Open();

                                command.ExecuteNonQuery();
                                connection.Close();
                            }
                        lblstat.Text = "Added Employee: " + NemployeeName;
                        lblstat.Update();
                    }
                        //if (radioGroup2.SelectedIndex == 1)
                        //{
                           // bool success = mSQL.myInsert("Etrav-Hack", S2);//china

                           // if (success == true)
                           // {
                                //lblstat.Text = "Added Employee: " + NemployeeName;
                               // lblstat.Update();
                            //}
                        //}
                    //}

                    catch
                    {
                        MessageBox.Show("SQL Insert Failed For Query: \n" + S2);

                        return;
                    }
                }
                if (i == gridView1.RowCount)
                {
                    lblstat.Text = "Added Employee: Completed Without Error";
                    lblstat.Update();
                }
            }
            lblstat.Text = "Added Employee: Completed Without Error";
            lblstat.Update();
        }

        public void handeldatacsv()//us&china  csv file type
        {
            ExcelDataSource excelDataSource2 = new ExcelDataSource() { FileName = xfile, SourceOptions = new CsvSourceOptions() { CellRange = "A1:L1000" } };
            excelDataSource2.SourceOptions.SkipEmptyRows = false;
            excelDataSource2.SourceOptions.UseFirstRowAsHeader = true;
            gridControl1.DataSource = excelDataSource2;
            gridControl2.RefreshDataSource();

            try
            { excelDataSource2.Fill(); }
            catch (ArgumentException)
            {
                MessageBox.Show("File is in wrong format! Use Excel file type please. Columns:EmployeeID	Location	Name	Title	DeptID	EmpGroup	SupervisorName	FullPart	Shift	Reg_Temp	Work_Center	CostCenter	HireDate"); return;


            }//else error message



            for (int i = 0; i < gridView1.RowCount; i++)
            {
                int Info; int c = 0;
                NemployeeName = gridView2.GetRowCellDisplayText(i, gridView2.Columns["Name"]);
                NemployeeID = gridView1.GetRowCellDisplayText(i, gridView1.Columns["EmployeeID"]);
                c = NemployeeID.Length;
                if(c < 5) { NemployeeID = "0" + NemployeeID; c = 0; }
                NemployeeLOC = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Location"]);
                c = NemployeeLOC.Length;
                if (c < 2) { NemployeeLOC = "0" + NemployeeLOC; c = 0; }
                NemployeeTitle = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Title"]);
                NemployeeDeptID = gridView1.GetRowCellDisplayText(i, gridView1.Columns["DeptID"]);
                c = NemployeeDeptID.Length;
                if (c < 3) { NemployeeDeptID = "0" + NemployeeDeptID; c = 0; }
                NemployeeHireDate = gridView1.GetRowCellDisplayText(i, gridView1.Columns["HireDate"]);
                NemployeeSupervisorName = gridView1.GetRowCellDisplayText(i, gridView1.Columns["SupervisorName"]);
                if (NemployeeName == "") { return; }
                string S1 = string.Format("SELECT COUNT(*) FROM dbo.Employee_Information where Name='{0}' and EmployeeID='{1}'", NemployeeName, NemployeeID);
                string S2 = "insert into  Employee_Information (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName) Values('";
                SqlConnection SqlConn = new SqlConnection(ETRAV);
                SqlConn.Open();
                SqlCommand sda = new SqlCommand(S1, SqlConn);
                Info = (int)sda.ExecuteScalar();
                
                if (Info >= 1)
                {

                    //string S3 = string.Format("update dbo.Employee_Information set EmployeeID='{0}',Location='{1}',Name='{2}',Title='{3}',DeptID='{4}',HireDate='{5}',SupervisorName='{6}'where EmployeeID='{0}' ", NemployeeID, NemployeeLOC, NemployeeName, NemployeeTitle, NemployeeDeptID, NemployeeHireDate, NemployeeSupervisorName);

                    try
                    {
                        //mySQL mSQL = new mySQL();
                        if (radioGroup2.SelectedIndex == 0)
                        {
                            //bool success = mSQL.myInsert("Etrav-Hack", S3);
                            //if (success == true)
                            //{
                                //lblstat.Text = "Added Employee: " + NemployeeName;
                                //lblstat.Update();
                            //}

                            string connectionString = ConnStr;
                            using (SqlConnection connection = new SqlConnection(connectionString))
                            {
                                SqlCommand command = connection.CreateCommand();
                                command.CommandText = string.Format("update {7} set EmployeeID='{0}',Location='{1}',Name='{2}',Title='{3}',DeptID='{4}',HireDate='{5}',SupervisorName='{6}'where EmployeeID='{0}' ", @NemployeeID, @NemployeeLOC, @NemployeeName, @NemployeeTitle, @NemployeeDeptID, @NemployeeHireDate, @NemployeeSupervisorName, @MainTable);
                                command.Parameters.AddWithValue("@NemployeeID", NemployeeID);
                                command.Parameters.AddWithValue("@NemployeeLOC", NemployeeLOC);
                                command.Parameters.AddWithValue("@NemployeeName", NemployeeName);
                                command.Parameters.AddWithValue("@NemployeeTitle", NemployeeTitle);
                                command.Parameters.AddWithValue("@NemployeeDeptID", NemployeeDeptID);
                                command.Parameters.AddWithValue("@NemployeeHireDate", NemployeeHireDate);
                                command.Parameters.AddWithValue("@NemployeeSupervisorName", NemployeeSupervisorName);
                                command.Parameters.AddWithValue("@MainTable", MainTable);

                                connection.Open();

                                command.ExecuteNonQuery();
                                connection.Close();
                            }

                            lblstat.Text = "Added Employee: " + NemployeeName;
                            lblstat.Update();

                        }
                        if (radioGroup2.SelectedIndex == 1)
                        {
                            //bool success = mSQL.myInsert("Etrav-Hack", S2);//china
                            //if (success == true)
                            //{
                                //lblstat.Text = "Added Employee: " + NemployeeName;
                               // lblstat.Update();
                            //}
                        }
                    }

                    catch
                    {
                        MessageBox.Show("SQL Insert Failed For Query: \n" + S2);

                        return;
                    }
                    SqlConn.Close();
                }//enter an update option here
                else
                {
                    S2 = string.Format("{0}{1}','", S2, NemployeeID);
                    S2 = string.Format("{0}{1}','", S2, NemployeeLOC);
                    S2 = string.Format("{0}{1}','", S2, NemployeeName);
                    S2 = string.Format("{0}{1}','", S2, NemployeeTitle);
                    S2 = string.Format("{0}{1}','", S2, NemployeeDeptID);
                    S2 = string.Format("{0}{1}','", S2, NemployeeHireDate);
                    S2 = string.Format("{0}{1}')", S2, NemployeeSupervisorName);
                    try
                    {
                        //mySQL mSQL = new mySQL();
                        if (radioGroup2.SelectedIndex == 0)
                        {
                            //bool success = mSQL.myInsert("Etrav-Hack", S2);
                            //if (success == true)
                            //{
                                //lblstat.Text = "Added Employee: " + NemployeeName;
                                //lblstat.Update();
                           // }
                            string connectionString = ConnStr;
                            using (SqlConnection connection = new SqlConnection(connectionString))
                            {
                                SqlCommand command = connection.CreateCommand();
                                command.CommandText = string.Format("insert into " + MainTable + " (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName,FullPart,Reg_Temp) Values( @NemployeeID, @NemployeeLOC, @NemployeeName, @NemployeeTitle, @NemployeeDeptID, @NemployeeHireDate, @NemployeeSupervisorName, @EMPLOYEETYPE, @EMPLOYEETYPE)");
                                command.Parameters.AddWithValue("@NemployeeID", NemployeeID);
                                command.Parameters.AddWithValue("@NemployeeLOC", NemployeeLOC);
                                command.Parameters.AddWithValue("@NemployeeName", NemployeeName);
                                command.Parameters.AddWithValue("@NemployeeTitle", NemployeeTitle);
                                command.Parameters.AddWithValue("@NemployeeDeptID", NemployeeDeptID);
                                command.Parameters.AddWithValue("@NemployeeHireDate", NemployeeHireDate);
                                command.Parameters.AddWithValue("@NemployeeSupervisorName", NemployeeSupervisorName);
                                //command.Parameters.AddWithValue("@MainTable", MainTable);
                                command.Parameters.AddWithValue("@EMPLOYEETYPE", EMPLOYEETYPE);
                                command.Parameters.AddWithValue("@EMPLOYEETYPE", EMPLOYEETYPE);

                                connection.Open();

                                command.ExecuteNonQuery();
                                connection.Close();
                            }
                            lblstat.Text = "Added Employee: " + NemployeeName;
                            lblstat.Update();
                        }
                        if (radioGroup2.SelectedIndex == 1)
                        {
                            //bool success = mSQL.myInsert("Etrav-Hack", S2);//china
                            //if (success == true)
                            //{
                                //lblstat.Text = "Added Employee: " + NemployeeName;
                                //lblstat.Update();
                            //}
                        }
                    }

                    catch
                    {
                        MessageBox.Show("SQL Insert Failed For Query: \n" + S2);

                        return;
                    }
                }
                lblstat.Text = "Added Employee: Completed Without Error";
                lblstat.Update();
                upload = false;
                

            }
            lblstat.Text = "Added Employee: Completed Without Error";
            lblstat.Update();
            upload = false;
        }
        private bool ConfirmUser()
        {
            getlogon getin = new getlogon();
            string value = "Employee ID";
            //InputBox.Show("New document", "New document name:", ref value);
            if (InputBox("Confirm Current User?", "Comfirm Employee ID:", ref value) == DialogResult.OK)
            {
                LoggedinEmployeeID = value; // Do a try/catch encase network connection is down.7
                loggedIN = getin.getpersistant(LoggedinEmployeeID);
                employeeID = LoggedinEmployeeID;
                employeeName = getin.getlog(LoggedinEmployeeID, out rights, CallingAppName, out authorizedlevel);
                if (rights == 0) { MessageBox.Show("You Do Not Have Rights To This Application!"); Environment.Exit(1); }
                //if(employeeID=="06539" || employeeID == "04357" || employeeID == "04838") { hyperLinkEdit1.Visible = true; }//No longer needed
                checkArea();
                //check if user has a password
                SqlConnection SqlConn = new SqlConnection(ETRAV);
                SqlConn.Open();
                string S1 = string.Format("Select password256, name from  qcrr.dbo.tblPassword256 where employeeid='{0}'", employeeID);
                SqlCommand SelectCommand = new SqlCommand(S1, SqlConn);

                try
                {
                    SqlDataReader myreader = SelectCommand.ExecuteReader();
                    while (myreader.Read())
                    {

                        password = myreader.GetString(0);
                        name = myreader.GetString(1);

                    }
                    if (password == "" || password == null || password == "Null") { MessageBox.Show(string.Format("No Passwords Exist For User: {0} Set up new user", name)); state=establishNewUser(employeeID, name, CallingAppName); return state; }//Prompt for new password;
                }
                catch { MessageBox.Show("Password Exception! Setup NEW USER!"); state = establishNewUser(employeeID, name, CallingAppName); return state; }


            }
            else { return state = false; }

            //make input box asking for password
            string value2 = "Password";

            if (InputBoxPass("Password?", "Please Enter your Password ", ref value2) == DialogResult.OK)//create option to get new password
            {

                getlogon getpass = new getlogon();
                //state = getpass.getauthpassword(value2,employeeName, employeeID,false);
                state = getpass.getfulllog(employeeName, employeeID, CallingAppName, true, value2, false);
                if (state == true) { getpass.getpersistant(employeeID); } //set persistant
                if (state == false) { MessageBox.Show("Password not accepted!"); Environment.Exit(1); }//return state
                //if (state == true && employeeID == "07840" || employeeID == "06539") { btnbarManagment.Enabled = true; simpleButton6.Enabled = true; }

            }


            return state;

        }

        public static DialogResult InputBox(string title, string promptText, ref string value)
        {
            Form form = new Form();
            Label label = new Label();
            TextBox textBox = new TextBox();
            Button buttonOk = new Button();
            Button buttonCancel = new Button();

            form.Text = title;
            label.Text = promptText;
            textBox.Text = value;

            buttonOk.Text = "OK";
            buttonCancel.Text = "Cancel";
            buttonOk.DialogResult = DialogResult.OK;
            buttonCancel.DialogResult = DialogResult.Cancel;

            label.SetBounds(9, 20, 372, 13);
            textBox.SetBounds(12, 36, 372, 20);
            buttonOk.SetBounds(228, 72, 75, 23);
            buttonCancel.SetBounds(309, 72, 75, 23);

            label.AutoSize = true;
            textBox.Anchor = textBox.Anchor | AnchorStyles.Right;
            buttonOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;

            form.ClientSize = new Size(396, 107);
            form.Controls.AddRange(new Control[] { label, textBox, buttonOk, buttonCancel });
            form.ClientSize = new Size(Math.Max(300, label.Right + 10), form.ClientSize.Height);
            form.FormBorderStyle = FormBorderStyle.FixedDialog;
            form.StartPosition = FormStartPosition.CenterScreen;
            form.MinimizeBox = false;
            form.MaximizeBox = false;
            form.AcceptButton = buttonOk;
            form.CancelButton = buttonCancel;

            DialogResult dialogResult = form.ShowDialog();
            value = textBox.Text;
            return dialogResult;
        }

        public static DialogResult InputBoxPass(string title, string promptText, ref string value)
        {
            Form form = new Form();
            Label label = new Label();
            TextBox textBox = new TextBox();
            Button buttonOk = new Button();
            Button buttonCancel = new Button();
            Button buttonNewPass = new Button();

            form.Text = title;
            label.Text = promptText;
            textBox.Text = value;
            textBox.PasswordChar = '%';

            buttonOk.Text = "OK";
            buttonCancel.Text = "Cancel";
            buttonNewPass.Text = "Get New Pass";
            buttonOk.DialogResult = DialogResult.OK;
            buttonCancel.DialogResult = DialogResult.Cancel;
            buttonNewPass.DialogResult = DialogResult.Yes;

            label.SetBounds(9, 20, 372, 13);
            textBox.SetBounds(12, 36, 372, 20);
            buttonOk.SetBounds(228, 72, 75, 23);
            buttonNewPass.SetBounds(12,72,75,23);
            buttonCancel.SetBounds(309, 72, 75, 23);

            label.AutoSize = true;
            textBox.Anchor = textBox.Anchor | AnchorStyles.Right;
            buttonOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            buttonNewPass.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;

            form.ClientSize = new Size(396, 107);
            form.Controls.AddRange(new Control[] { label, textBox, buttonOk, buttonCancel });
            form.ClientSize = new Size(Math.Max(300, label.Right + 10), form.ClientSize.Height);
            form.FormBorderStyle = FormBorderStyle.FixedDialog;
            form.StartPosition = FormStartPosition.CenterScreen;
            form.MinimizeBox = false;
            form.MaximizeBox = false;
            form.AcceptButton = buttonOk;
            form.CancelButton = buttonCancel;
            

            DialogResult dialogResult = form.ShowDialog();
            value = textBox.Text;
            return dialogResult;
        }

        private void hyperLinkEdit1_OpenLink(object sender, OpenLinkEventArgs e)//Open US/China xls sheet
        {
            xfile = "C:\\sql\\Sheet1.csv";
            //Application excel;
            SqlConnection conn = new SqlConnection(ETRAV);
            conn.Open();
            SqlCommand cmd = new SqlCommand("select * from  Qcrr.dbo.Employee_Information", conn);
            SqlDataReader dr = cmd.ExecuteReader();

            using (StreamWriter fs = new StreamWriter(xfile))
            {
                // Loop through the fields and add headers
                for (int i = 0; i < dr.FieldCount; i++)
                {
                    string name = dr.GetName(i);
                    if (name.Contains(","))
                        name = string.Format("\"{0}\"", name);

                    fs.Write(name + ",");
                }
                fs.WriteLine();

                // Loop through the rows and output the data
                while (dr.Read())
                {
                    for (int i = 0; i < dr.FieldCount; i++)
                    {
                        string value = dr[i].ToString();
                        if (value.Contains(","))
                            value = string.Format("\"{0}\"", value);

                        fs.Write(value + ",");
                    }
                    fs.WriteLine();
                }

                
            }

            System.Diagnostics.Process.Start("notepad.exe", xfile); MessageBox.Show("This is a Current LIVE Employee List! If you save your changes and UPLOAD, it will replace the current list");
            lblstat.Text = "File saved as: C:\\sql\\Sheet1.csv \r\n Open in MS Excel to edit";
        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            lblstat.Text = "Processing File...";
        }

        private void txtFirstName_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeFName = RemoveWhitespace(txtFirstName.Text);
        }

        private void txtLastName_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeLName = txtLastName.Text;
            if(NemployeeLName.Contains(" ") && apostcheck==true) { NemployeeLName = NemployeeLName.Replace(" ", "'"); txtLastName.Text = NemployeeLName; }
        }

        private void txtJobTitle_EditValueChanged(object sender, EventArgs e)
        {
            var d=0;
            NemployeeTitle = txtJobTitle.Text;
            d = NemployeeTitle.Length;
            if (d > 50)
            {
                NemployeeTitle = NemployeeTitle.Remove(50, (d - 50));
                lblstat.Text = string.Format("Title had to be reduced to {0} \r\n to meet 50 character max requirment!", NemployeeTitle);
                lblstat.Update();
            }//out of range edit
        }

        private void txtBoss_EditValueChanged(object sender, EventArgs e)
        {

            NemployeeSupervisorName = txtBoss.Text;

        }

        private void txtDeptID_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeDeptID = txtDeptID.Text;
        }

        private void txtLOC_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeLOC = txtLOC.Text;
        }

        private void txtEmployeeID_EditValueChanged(object sender, EventArgs e)
        {
           
            int c = 0;
            lblstat.Text = "";
            NemployeeID = txtEmployeeID.Text;
            NemployeeID = RemoveWhitespace(NemployeeID);
           c = NemployeeID.Length;
            if (c >= 5 && upload==false)
            {
                SqlConnection SqlConn = new SqlConnection(ETRAV);
                SqlConn.Open();
                SqlDataAdapter sda = new SqlDataAdapter(string.Format("SELECT COUNT(*) FROM {1} where EmployeeID='{0}'", NemployeeID, MainTable), SqlConn);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                if (dt.Rows[0][0].ToString() == "1")
                {

                    SqlCommand SelectCommand = new SqlCommand(string.Format("select Location,Name,Title,SupervisorName,FullPart,Shift,Reg_Temp,Work_Center,CostCenter,HireDate,DeptID,Reg_Temp from  {1} where EmployeeID='{0}'", NemployeeID, MainTable), SqlConn);
                    try
                    {
                        object[] einfo= new object[] {11};
                        int i = 0;
                        SqlDataReader myreader = SelectCommand.ExecuteReader();

                        while (myreader.Read())
                        {

                            //einfo[i] = myreader.GetString(i);

                            i = myreader.GetValues(einfo);
                            txtLOC.Text = myreader.GetString(0);
                            NemployeeName = myreader.GetString(1);
                            int w = NemployeeName.Length;
                            int x = NemployeeName.IndexOf(",");
                            char z = NemployeeName.Last();
                            int y = NemployeeName.LastIndexOf(z);
                            int v = NemployeeName.IndexOf(" ");
                            if (NemployeeName.Contains("'")) { apostcheck = true; } else { apostcheck = false; }
                            if (v > -1|| NemployeeName.Contains("Jr") || NemployeeName.Contains("Sr")) txtLastName.Text = NemployeeName.Substring(0, x);
                            if (v == -1) { txtLastName.Text = NemployeeName.Substring(0, x); }
                            if (v > -1 && !(NemployeeName.Contains("Jr")) && !(NemployeeName.Contains("Sr"))) { txtMiddleName.Text = NemployeeName.Substring(v+1, v+1); txtLastName.Text = NemployeeName.Substring(0, v); } else { txtMiddleName.Text = ""; }
                            txtFirstName.Text = NemployeeName.Remove(0, x+1);
                            int namecheck = NemployeeFName.Length + NemployeeMName.Length + NemployeeLName.Length +1;
                            
                            if (w != namecheck && NemployeeLName.Contains(NemployeeMName))
                            {
                                v = NemployeeFName.IndexOf(" ");
                                w = NemployeeFName.Length;
                                txtMiddleName.Text = NemployeeFName.Remove(v, v); 
                                txtFirstName.Text = NemployeeFName.Remove(0, v+1);
                                //txtMiddleName.Text = "";
                            }
                            if (!(NemployeeLName.Contains(NemployeeMName)))
                            {
                                txtMiddleName.Text = RemoveWhitespace(NemployeeMName);
                                txtFirstName.Text = NemployeeFName.Replace(NemployeeMName, "");

                            }
                            else { txtMiddleName.Text = ""; }
                            txtJobTitle.Text = myreader.GetString(2);
                            txtBoss.Text = myreader.GetString(3);
                            txtDate.Text = myreader.GetString(9);
                            txtDeptID.Text = myreader.GetString(10);
                            EMPLOYEETYPE = myreader.GetString(11);
                            if (EMPLOYEETYPE == "R"|| EMPLOYEETYPE == "F") { radioGroup1.EditValue = 0; }
                            if (EMPLOYEETYPE == "T" || EMPLOYEETYPE == "P") { radioGroup1.EditValue = 2; }
                            if (Convert.ToInt32(NemployeeID) > 80000) {  radioGroup2.EditValue = 1;  radioGroup2.Update(); } else { radioGroup2.EditValue = 0; radioGroup2.Update(); }

                        }

                        myreader.Close();
                        
                    }

                    catch
                    {
                        var emptype = "";
                        if(NemployeeID.Contains("C")) { NemployeeID = NemployeeID.Remove(0, 1); emptype = "C"; }
                        if(NemployeeID.Contains("T")) { NemployeeID = NemployeeID.Remove(0, 1); emptype = "T"; }
                        upload = false;
                        EMPLOYEETYPE = "R";
                        lblstat.Text = string.Format("Employee {0} already exists but can be updated by making changes on the left then \r\n Click ADD. Check Middle name format if available", NemployeeName);
                        lblstat.ForeColor = Color.Red;
                        if (EMPLOYEETYPE == "R" || EMPLOYEETYPE == "F") { radioGroup1.EditValue = 0; }
                        if (EMPLOYEETYPE == "T" || EMPLOYEETYPE == "P") { radioGroup1.EditValue = 2; }
                        if (Convert.ToInt32(NemployeeID) > 80000 || emptype == "C") { radioGroup2.EditValue = 1; radioGroup2.Update(); } else { radioGroup2.EditValue = 0; radioGroup2.Update(); }
                        

                        SqlConn.Close();
                        return;
                    }
                    upload = false;
                    if (NemployeeName != "")
                    {
                        lblstat.Text = string.Format("Employee {0} already exists but can be updated by making changes on the left then \r\n Click ADD. Check Middle name format if available", NemployeeName);
                        lblstat.ForeColor = Color.Red;
                    }
                }
                SqlConn.Close();
                if (NemployeeName == "")
                {
                    lblstat.Text = string.Format("Employee {0} not found", NemployeeID);
                    lblstat.ForeColor = Color.Red;
                    //lblstat =einfo[]
                }
            }
        }

        private void txtDate_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeHireDate = txtDate.Text;
        }

        private void txtMiddleName_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeMName = txtMiddleName.Text;
        }

        private void txtBoss_SelectedIndexChanged(object sender, EventArgs e)
        {
            NemployeeSupervisorName = txtBoss.Text;
        }

        private void radioGroup1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (radioGroup1.SelectedIndex == 0) { EMPLOYEETYPE = "R"; }
            if (radioGroup1.SelectedIndex == 1) { EMPLOYEETYPE = "P"; }
            if (radioGroup1.SelectedIndex == 2) { EMPLOYEETYPE = "T"; }
            
        }

        private void radioGroup2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (radioGroup2.SelectedIndex == 0) { LOCAREA = "US"; txtLOC.Text = "36"; }
            if (radioGroup2.SelectedIndex == 1) { LOCAREA = "CHINA"; txtLOC.Text = "16"; }
        }

        private void checkArea()
        {
            try
            {
                if (Convert.ToInt32(employeeID) > 80000) { LOCAREA = "16";  radioGroup2.EditValue = 1; ETRAV = ConnStr1; txtLOC.Text = LOCAREA; radioGroup2.Update(); }
                else { LOCAREA = "36"; radioGroup2.EditValue = 0; ETRAV = ConnStr; txtLOC.Text = LOCAREA; radioGroup2.Update(); }
            }
            catch { MessageBox.Show("EmployeeID can not be Null!"); }
        }

        public void CheckGetUpdates(Version cver)
        {

            SqlConnection SqlConn2 = new SqlConnection(ConnStr);
            SqlConn2.Open();
            SqlCommand SelectCommand1 = new SqlCommand(string.Format("select FileVersion from images.dbo.tblVSapplications where Applicationname = '{0}'", CallingAppName), SqlConn2);
            SqlDataReader myreader1 = SelectCommand1.ExecuteReader();

            while (myreader1.Read())
            {
                serverver = string.Format("{0}", myreader1.GetString(0));
                bool result = serverver.Equals(cver.ToString(), StringComparison.Ordinal);
                if (result == false)
                { MessageBox.Show("There is a newer version available!:" + serverver); lblVersion.Text = "Version Out Of Date!"; lblVersion.ForeColor = Color.Red;  }//Getlatest();

            }
            myreader1.Close();
            return;
        }
       
        public static string RemoveWhitespace(string input)
        {
            return new string(input.ToCharArray()
                .Where(c => !Char.IsWhiteSpace(c))
               .ToArray());
        }

        public void RefreshForm()
        {

            UncheckAll(this);
            ClearTextBoxes();
            txtBoss.Text = "";
            txtDate.Text = "";
            txtDeptID.Text = "";
            txtEmployeeID.Text = "";
            txtFirstName.Text = "";
            txtJobTitle.Text = "";
            txtLastName.Text = "";
            txtLOC.Text = "";
            txtMiddleName.Text = "";
            
            
        }

        private void ClearTextBoxes()
        {
            Action<Control.ControlCollection> func = null;

            func = (controls) =>
            {
                foreach (Control control in controls)
                    if (control is TextBox)
                        (control as TextBox).Clear();
                    else
                        func(control.Controls);
            };

            func(Controls);
        }

        public void employBU()//back up to temp [dbo].[Employee_Information_Tmp]
        {
            SqlConnection SqlConn = new SqlConnection(ETRAV);
            SqlConn.Open();

            if(LOCAREA == "CHINA"|| LOCAREA == "16")
            {
                //clear table (CHINA)
                //string sqlTrunc = "TRUNCATE TABLE " + BUTableCN;
                string sqlTrunc1 = "Delete from " + BUTableCN;
                SqlCommand cmd1 = new SqlCommand(sqlTrunc1, SqlConn);
                cmd1.ExecuteNonQuery();

                //Perform back up(CHINA)
                SqlDataAdapter sda1 = new SqlDataAdapter(string.Format("SELECT * FROM {0} where Location='16'", MainTable), SqlConn);
                DataTable dt1 = new DataTable();
                DataSet ds1 = new DataSet();
                sda1.Fill(dt1);
                sda1.Fill(ds1);
                SqlBulkCopy bc1 = new SqlBulkCopy(ETRAV) { DestinationTableName = BUTableCN };
                bc1.WriteToServer(ds1.Tables[0]);
                bc1.Close(); SqlConn.Close();
                lblstat.Text = "FRESH BACKUP COMPLETED!";
                lblstat.Update();

            }


            if (LOCAREA == "US"|| LOCAREA == "36")
            {
                //clear table (US/CHINA)
                //string sqlTrunc = "TRUNCATE TABLE " + BUTable;
                string sqlTrunc = "Delete from " + BUTable;
                SqlCommand cmd = new SqlCommand(sqlTrunc, SqlConn);
                cmd.ExecuteNonQuery();

                //Perform back up(US/CHINA)
                SqlDataAdapter sda = new SqlDataAdapter(string.Format("SELECT * FROM {0} ", MainTable), SqlConn);
                DataTable dt = new DataTable();
                DataSet ds = new DataSet();
                sda.Fill(dt);
                sda.Fill(ds);
                SqlBulkCopy bc = new SqlBulkCopy(ETRAV) { DestinationTableName = BUTable };
                bc.WriteToServer(ds.Tables[0]);
                bc.Close(); SqlConn.Close();
                lblstat.Text = "FRESH BACKUP COMPLETED!";
                lblstat.Update();
            }
        }

        private void UncheckAll(Control ctrl)
        {
            CheckBox chkBox = ctrl as CheckBox;
            if (chkBox == null)
            {
                foreach (Control child in ctrl.Controls)
                {
                    UncheckAll(child);
                }
            }
            else
            {
                chkBox.Checked = false;
            }
        }

        private void simpleButton4_Click(object sender, EventArgs e)
        {
            RefreshForm();
        }

        private bool establishNewUser(string id, string NAME, string CallingAppName)
        {
            //make input box asking for password
            string value1 = "";
            string value2 = "";
            string ComputerName = Environment.GetEnvironmentVariable("COMPUTERNAME");
            if (InputBoxPass("Password?", "Please Enter your New Password:", ref value1) == DialogResult.OK)//create option to get new password
            {
                password = EncryptText(value1, enternalpassword);
                if (InputBoxPass("Password?", "Please Confirm your New Password:", ref value2) == DialogResult.OK) { passwordchk = EncryptText(value2, enternalpassword); }

                if (password != passwordchk) { MessageBox.Show("Passwords Don't Match. Please Try Again"); return prestate = false; }


                SqlConnection SqlConn = new SqlConnection(ETRAV);
                SqlConn.Open();
                SqlDataAdapter sda3 = new SqlDataAdapter(string.Format("SELECT COUNT(*) From tblPassword256 WHERE password256='{0}' and employeeid='{1}'", password, employeeID), SqlConn);
                DataTable dt3 = new DataTable();
                sda3.Fill(dt3);
                if (dt3.Rows[0][0].ToString() == "1")
                {
                    string newpass = string.Format("update qcrr.dbo.tblPassword256 set password256='{0}' where employeeid='{1}' and name='{2}'", password, id, NAME);
                    try
                    {

                        using (SqlConnection connection = new SqlConnection(ETRAV))
                        using (SqlCommand command = connection.CreateCommand())
                        {
                            command.CommandText = string.Format("update qcrr.dbo.tblPassword256 set password256=@password256 where employeeid='{0}' and name='{1}'", id, NAME);
                            command.Parameters.AddWithValue("@password256", password);
                            connection.Open();
                            command.ExecuteNonQuery();
                            success = true;
                        }

                        if (success == true) { MessageBox.Show("Password is saved for user: \n" + NAME); }
                        return prestate = true;
                    }

                    catch
                    {
                        MessageBox.Show("SQL Insert Failed For Query: \n" + NAME);
                        return prestate = false;

                    }



                }
                if (dt3.Rows[0][0].ToString() == "0")
                {
                    getlogon setnew = new getlogon();
                    prestate = setnew.getauthpassword(password, employeeName, employeeID, true);


                }
            }


            return prestate;


        }

        public string EncryptText(string input, string password)
        {
            // Get the bytes of the string
            byte[] bytesToBeEncrypted = Encoding.UTF8.GetBytes(input);
            byte[] passwordBytes = Encoding.UTF8.GetBytes(password);

            // Hash the password with SHA256
            passwordBytes = SHA256.Create().ComputeHash(passwordBytes);

            byte[] bytesEncrypted = AES_Encrypt(bytesToBeEncrypted, passwordBytes);

            string result = Convert.ToBase64String(bytesEncrypted);

            return result;
        }

        //Encryption 256 Methods
        public byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
        {
            byte[] encryptedBytes = null;

            // Set your salt here, change it to meet your flavor:
            // The salt bytes must be at least 8 bytes.
            byte[] saltBytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };

            using (MemoryStream ms = new MemoryStream())
            {
                using (RijndaelManaged AES = new RijndaelManaged())
                {
                    AES.KeySize = 256;
                    AES.BlockSize = 128;

                    var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                    AES.Key = key.GetBytes(AES.KeySize / 8);
                    AES.IV = key.GetBytes(AES.BlockSize / 8);

                    AES.Mode = CipherMode.CBC;

                    using (var cs = new CryptoStream(ms, AES.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
                        cs.Close();
                    }
                    encryptedBytes = ms.ToArray();
                }
            }

            return encryptedBytes;
        }


    }
}
