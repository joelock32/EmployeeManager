using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using DevExpress.XtraEditors.Controls;
using static Elogon256.sqlConns;
using EtravSQL;
using DevExpress.DataAccess.Excel;
using System.Data.SqlClient;
using System.Data;
using testlogon;


namespace EmployeeManager
{
    public partial class Form1 : Form
    {
        static string CallingAppName = "EmployeeManager.exe"; //the name of this app used for login dll
        const String ConnStr = "Data Source=etrav-hack;Initial Catalog=qcrr;Persist Security Info=True;User ID=Application;Password=noitacilppa";
        const String ConnStr1 = "Data Source=etraveler04;Initial Catalog=qcrr;Persist Security Info=True;User ID=Application;Password=noitacilppa";
        public string LoggedinEmployeeID { get; private set; }
        private bool loggedIN;
        private string employeeID;
        private string employeeName;
        private int rights;
        private int authorizedlevel;
        public string xfile;
        private string NemployeeName;
        private string NemployeeID;
        private string NemployeeLOC;
        private string NemployeeTitle;
        private string NemployeeDeptID;
        private string NemployeeHireDate;
        private string NemployeeSupervisorName;
        private string NemployeeFName;
        private string NemployeeMName;
        private string NemployeeLName;
        private string LOCAREA;
        private string EMPLOYEETYPE;
        public bool state { get; private set; }

        public Form1()
        {
            
            InitializeComponent();
            //initialize Employee Status
            object[] itemValues = new object[] { 0, 1, 2 };
            string[] itemDescriptions = new string[] { "Full Time", "Part Time", "Reg_Temp" };
            for (int i = 0; i < itemValues.Length; i++)
            {
                radioGroup1.Properties.Items.Add(new RadioGroupItem(itemValues[i], itemDescriptions[i]));
            }
            //initialize Location Status 2
            object[] itemValues2 = new object[] { 0, 1 };
            string[] itemDescriptions2 = new string[] { "US", "CHINA" };
            for (int j = 0; j < itemValues2.Length; j++)
            {
                radioGroup2.Properties.Items.Add(new RadioGroupItem(itemValues2[j], itemDescriptions2[j]));
            }

            SqlConnection SqlConn = new SqlConnection(ConnStr);
            SqlConn.Open();
            SqlCommand SelectCommand = new SqlCommand(string.Format("select distinct SupervisorName from dbo.Employee_Information"), SqlConn);
            SqlDataReader myreader = SelectCommand.ExecuteReader();

            while (myreader.Read())
            {
                txtBoss.Properties.Items.Add(myreader["SupervisorName"].ToString());

            }
            myreader.Close();

            ConfirmUser();
            radioGroup1.EditValue = 2;//defualt Employee Type = R
            
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
            //sqlDataSource1.Fill();
        }

        private void simpleButton1_Click(object sender, EventArgs e)//ADD ONE NEW EMPLOYEE
        {
            //Check Data
            NemployeeName = string.Format("{0},{1}", NemployeeLName, NemployeeFName);
            SqlConnection SqlConn = new SqlConnection(ConnStr);
            SqlConn.Open();
            SqlDataAdapter sda = new SqlDataAdapter(string.Format("SELECT COUNT(*) FROM dbo.Employee_Information where Name='{0}'", NemployeeName), SqlConn);
            DataTable dt = new DataTable();
            sda.Fill(dt);

            //ifOK Upload new employee
            if (dt.Rows[0][0].ToString() == "0")
            {

                string newemployee = string.Format("insert into dbo.Employee_Information (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName,FullPart,Reg_Temp,) Values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}'", NemployeeID, NemployeeLOC, NemployeeName, NemployeeTitle, NemployeeDeptID, NemployeeHireDate, NemployeeSupervisorName, EMPLOYEETYPE, EMPLOYEETYPE);
                try
                {
                    mySQL mSQL = new mySQL();
                    bool success = mSQL.myInsert("Etrav-Hack", newemployee);

                }

                catch
                {
                    MessageBox.Show("SQL Insert Failed For Query: \n" + newemployee);
                    //hyperlinkLabelControl1.Text = "SQL Insert Failed";
                    return;
                }
            }
            //else error message

        }

        private void simpleButton2_Click(object sender, EventArgs e)//DELETE ONE CURRENT EMPLOYEE
        {
            //Check Data
            NemployeeName = string.Format("{0},{1}", NemployeeLName, NemployeeFName);
            SqlConnection SqlConn = new SqlConnection(ConnStr);
            SqlConn.Open();
            SqlDataAdapter sda = new SqlDataAdapter(string.Format("SELECT COUNT(*) FROM dbo.Employee_Information where Name='{0}'", NemployeeName), SqlConn);
            DataTable dt = new DataTable();
            sda.Fill(dt);

            //ifOK Upload new employee
            if (dt.Rows[0][0].ToString() == "1")
            {

                string deleteemployee = string.Format("delete from  dbo.Employee_Information where EmployeeID='{0}', Name='{1}'", NemployeeID, NemployeeName);
                try
                {
                    mySQL mSQL = new mySQL();
                    bool success = mSQL.myInsert("Etrav-Hack", deleteemployee);

                }

                catch
                {
                    MessageBox.Show("SQL Insert Failed For Query: \n" + deleteemployee);
                    //hyperlinkLabelControl1.Text = "SQL Insert Failed";
                    return;
                }
            }
            //else error message

        }

        private void simpleButton3_Click(object sender, EventArgs e)//UPLOAD EMPLOYEE FILE(XLS,CVS)
        {
           
            //OPEN DIALOG BOX
            DialogResult result = openFileDialog1.ShowDialog();
            //Check Data

            //ifOK Upload UPDATED EMPLOYEE LIST
            if (result == DialogResult.OK) // Test result.
            {
                xfile = openFileDialog1.FileName;
                //excelDataSource1.FileName = xfile;
                //DevExpress.DataAccess.Excel.ExcelDataSource myExcelSource = new DevExpress.DataAccess.Excel.ExcelDataSource();
                //myExcelSource.FileName = xfile;
                //hyperlinkLabelControl1.Text = string.Format("ADP FILE: {0} is Loaded!", xfile);

            }
            Console.WriteLine(result); // <-- For debugging use.

            ExcelDataSource excelDataSource1 = new ExcelDataSource() { FileName = xfile };
            ExcelSourceOptions myOptions = new ExcelSourceOptions();
            ExcelWorksheetSettings cellRangeSettings = new ExcelWorksheetSettings("sheet1");
            myOptions.ImportSettings = cellRangeSettings;
            excelDataSource1.SourceOptions = myOptions;
            gridControl1.DataSource = excelDataSource1;
            excelDataSource1.Fill();
            //else error message

            for (int i = 1; i < gridView1.RowCount; i++)
            {
                int Info;  
                NemployeeName = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Name"]);
                NemployeeID = gridView1.GetRowCellDisplayText(i, gridView1.Columns["EmployeeID"]);
                NemployeeLOC = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Location"]);
                NemployeeTitle = gridView1.GetRowCellDisplayText(i, gridView1.Columns["Title"]);
                NemployeeDeptID = gridView1.GetRowCellDisplayText(i, gridView1.Columns["DeptID"]);
                NemployeeHireDate = gridView1.GetRowCellDisplayText(i, gridView1.Columns["HireDate"]);
                NemployeeSupervisorName = gridView1.GetRowCellDisplayText(i, gridView1.Columns["SupervisorName"]);
                string S1 = string.Format("SELECT COUNT(*) FROM dbo.Employee_Information where Name='{0}' and EmployeeID='{1}'", NemployeeName, NemployeeID);
                string S2 = "insert into  Employee_Information (EmployeeID,Location,Name,Title,DeptID,HireDate,SupervisorName) Values('";
                SqlConnection SqlConn = new SqlConnection(ConnStr);
                SqlConn.Open();
                SqlCommand sda = new SqlCommand(string.Format(S1), SqlConn);
                Info = (int)sda.ExecuteScalar();
                if (Info >= 1) { return; }//enter an update option here
                else
                {
                    S2 = string.Format("{0}{1}','", S2, NemployeeID);
                    S2 = string.Format("{0}{1}','", S2, NemployeeLOC);
                    S2 = string.Format("{0}{1}','", S2, NemployeeName);
                    S2 = string.Format("{0}{1}','", S2, NemployeeTitle);
                    S2 = string.Format("{0}{1}','", S2, NemployeeDeptID);
                    S2 = string.Format("{0}{1}','", S2, NemployeeHireDate);
                    S2 = string.Format("{0}{1}',", S2, NemployeeSupervisorName);
                }
            }


        }

        private bool ConfirmUser()
        {
            getlogon getin = new getlogon();
            string value = "Employee ID";
            //InputBox.Show("New document", "New document name:", ref value);
            if (InputBox("Confirm Current User?", "Comfirm Employee ID:", ref value) == DialogResult.OK)
            {
                LoggedinEmployeeID = value; // Do a try/catch encase network connection is down.7
                loggedIN = getin.getpersistant(LoggedinEmployeeID);
                employeeID = LoggedinEmployeeID;
                employeeName = getin.getlog(LoggedinEmployeeID, out rights, CallingAppName, out authorizedlevel);
                checkArea();

            }
            else { System.Environment.Exit(1); }

            //make input box asking for password
            string value2 = "Password";

            if (InputBoxPass("Password?", "Please Enter your Admin Password or Cancel to setup new user:", ref value2) == DialogResult.OK)//create option to get new password
            {

                getlogon getpass = new getlogon();
                //state = getpass.getauthpassword(value2,employeeName, employeeID,false);
                state = getpass.getfulllog(employeeName, employeeID, CallingAppName, true, value2, false);
                if (state == true) { getpass.getpersistant(employeeID);  } //set persistant
                if (state == false) { MessageBox.Show("Password not accepted!"); System.Environment.Exit(1); }//return state
                //if (state == true && employeeID == "07840" || employeeID == "06539") { btnbarManagment.Enabled = true; simpleButton6.Enabled = true; }

            }
            else { System.Environment.Exit(1); }
            return state;

        }

        public static DialogResult InputBox(string title, string promptText, ref string value)
        {
            Form form = new Form();
            Label label = new Label();
            TextBox textBox = new TextBox();
            Button buttonOk = new Button();
            Button buttonCancel = new Button();

            form.Text = title;
            label.Text = promptText;
            textBox.Text = value;

            buttonOk.Text = "OK";
            buttonCancel.Text = "Cancel";
            buttonOk.DialogResult = DialogResult.OK;
            buttonCancel.DialogResult = DialogResult.Cancel;

            label.SetBounds(9, 20, 372, 13);
            textBox.SetBounds(12, 36, 372, 20);
            buttonOk.SetBounds(228, 72, 75, 23);
            buttonCancel.SetBounds(309, 72, 75, 23);

            label.AutoSize = true;
            textBox.Anchor = textBox.Anchor | AnchorStyles.Right;
            buttonOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;

            form.ClientSize = new Size(396, 107);
            form.Controls.AddRange(new Control[] { label, textBox, buttonOk, buttonCancel });
            form.ClientSize = new Size(Math.Max(300, label.Right + 10), form.ClientSize.Height);
            form.FormBorderStyle = FormBorderStyle.FixedDialog;
            form.StartPosition = FormStartPosition.CenterScreen;
            form.MinimizeBox = false;
            form.MaximizeBox = false;
            form.AcceptButton = buttonOk;
            form.CancelButton = buttonCancel;

            DialogResult dialogResult = form.ShowDialog();
            value = textBox.Text;
            return dialogResult;
        }

        public static DialogResult InputBoxPass(string title, string promptText, ref string value)
        {
            Form form = new Form();
            Label label = new Label();
            TextBox textBox = new TextBox();
            Button buttonOk = new Button();
            Button buttonCancel = new Button();
            Button buttonNewPass = new Button();

            form.Text = title;
            label.Text = promptText;
            textBox.Text = value;
            textBox.PasswordChar = '%';

            buttonOk.Text = "OK";
            buttonCancel.Text = "Cancel";
            buttonNewPass.Text = "Get New Pass";
            buttonOk.DialogResult = DialogResult.OK;
            buttonCancel.DialogResult = DialogResult.Cancel;
            buttonNewPass.DialogResult = DialogResult.Yes;

            label.SetBounds(9, 20, 372, 13);
            textBox.SetBounds(12, 36, 372, 20);
            buttonOk.SetBounds(228, 72, 75, 23);
            buttonNewPass.SetBounds(12,72,75,23);
            buttonCancel.SetBounds(309, 72, 75, 23);

            label.AutoSize = true;
            textBox.Anchor = textBox.Anchor | AnchorStyles.Right;
            buttonOk.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
            buttonNewPass.Anchor = AnchorStyles.Bottom | AnchorStyles.Left;

            form.ClientSize = new Size(396, 107);
            form.Controls.AddRange(new Control[] { label, textBox, buttonOk, buttonCancel });
            form.ClientSize = new Size(Math.Max(300, label.Right + 10), form.ClientSize.Height);
            form.FormBorderStyle = FormBorderStyle.FixedDialog;
            form.StartPosition = FormStartPosition.CenterScreen;
            form.MinimizeBox = false;
            form.MaximizeBox = false;
            form.AcceptButton = buttonOk;
            form.CancelButton = buttonCancel;
            

            DialogResult dialogResult = form.ShowDialog();
            value = textBox.Text;
            return dialogResult;
        }

        private void hyperLinkEdit1_OpenLink(object sender, OpenLinkEventArgs e)//Open US/China xls sheet
        {
            //open "C:\\sql\\US Employee Information Book.xlsx"
            //Application excel;
           

        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {

        }

        private void txtFirstName_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeFName = txtFirstName.Text;
        }

        private void txtLastName_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeLName = txtLastName.Text;
        }

        private void txtJobTitle_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeTitle = txtJobTitle.Text;
        }

        private void txtBoss_EditValueChanged(object sender, EventArgs e)
        {

            NemployeeSupervisorName = txtBoss.Text;

        }

        private void txtDeptID_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeDeptID = txtDeptID.Text;
        }

        private void txtLOC_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeLOC = txtLOC.Text;
        }

        private void txtEmployeeID_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeID = txtEmployeeID.Text;
        }

        private void txtDate_EditValueChanged(object sender, EventArgs e)
        {
            NemployeeHireDate = txtDate.Text;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'qcrrDataSet.Employee_Information' table. You can move, or remove it, as needed.
            //this.employee_InformationTableAdapter.Fill(this.qcrrDataSet.Employee_Information);

        }

        private void txtBoss_SelectedIndexChanged(object sender, EventArgs e)
        {
            NemployeeSupervisorName = txtBoss.Text;
        }

        private void radioGroup1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (radioGroup1.SelectedIndex == 0) { EMPLOYEETYPE = "F"; }
            if (radioGroup1.SelectedIndex == 1) { EMPLOYEETYPE = "P"; }
            if (radioGroup1.SelectedIndex == 2) { EMPLOYEETYPE = "R"; }
            
        }

        private void radioGroup2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (radioGroup2.SelectedIndex == 0) { LOCAREA = "US"; txtLOC.Text = "16"; }
            if (radioGroup2.SelectedIndex == 1) { LOCAREA = "CHINA"; txtLOC.Text = "16"; }
        }

        private void checkArea()
        {
             
            if (Convert.ToInt32(employeeID)> 80000) { radioGroup2.EditValue= 1; }
            else { radioGroup2.EditValue = 0; }
        }
    }
}
